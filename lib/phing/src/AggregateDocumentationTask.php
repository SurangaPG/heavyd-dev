<?php

require_once "phing/Task.php";

/**
 * Class AggregateDocumentationTask
 *
 * Aggregates the folder structure with partial items into flat html files.
 */
class AggregateDocumentationTask extends Task {

  /**
   * @var string
   *   Main directory to place the output.
   */
  private $outputDir;

  /**
   * @var string
   *   Source directory with all the partial files.
   */
  private $sourceDir;

  /**
   * @var string
   *   Template dir that contains all the templates.
   */
  private $templateDir;

  /**
   * @var Twig_Environment
   */
  protected $twigEnv;

  /**
   * @var \Symfony\Component\Filesystem\Filesystem
   */
  protected $fs;

  /**
   * The init method: Do init steps.
   */
  public function init() {
  }

  /**
   * The main entry point method.
   */
  public function main() {
    $loader = new \Twig_Loader_Filesystem($this->getTemplateDir());
    $this->twigEnv = new \Twig_Environment($loader);

    $this->fs = new \Symfony\Component\Filesystem\Filesystem();

    // Handle all the subdirs into aggregated html files.
    $rootDirs = glob($this->getSourceDir() . '/*', GLOB_ONLYDIR);
    foreach ($rootDirs as $rootDir) {
      $this->handleDir($rootDir);
    }

    // Generate the index.html from the root.
    $html = $this->aggregateSourceFiles($this->getSourceDir(), 'page--front.html.twig');
    $this->fs->dumpFile($this->getOutputDir() . '/index.html', $html);
  }

  /**
   * Handle all the items in a given directory.
   *
   * @param string $dir
   *   Get the dir for all the items.
   */
  protected function handleDir($dir) {
    // Glob all the dirs in the folder.
    $subDirs = glob($dir . '/*', GLOB_ONLYDIR);

    $outputFile = $this->prepareOutputFileLocation($dir);

    // The documentation structure is fully dependent on the file structure.
    // So we generate the correct html just before we aggregate the data to ensure
    // it is correct.
    $this->generateMenuHtml($dir);

    $html = $this->aggregateSourceFiles($dir);

    $this->fs->dumpFile($outputFile, $html);
    foreach($subDirs as $subDir) {
      $this->handleDir($subDir);
    }
  }

  /**
   * Generates a filename and a location to place it in the artifact.
   *
   * @param string $dir
   *   The source location to prepare an artifact output file location for.
   *
   * @return string
   *   The full name for the html file representing this dir in the artifact.
   */
  protected function prepareOutputFileLocation($dir) {
    $relativeDir = $this->makeRelative($dir);
    if (!file_exists($this->getOutputDir() . '/' . $relativeDir)) {
      mkdir($this->getOutputDir() . '/' . $relativeDir);
    }

    $fileName = basename($relativeDir) . '.html';
    $fileLocation = dirname($relativeDir);

    return $this->getOutputDir() . $fileLocation . '/' . $fileName;
  }

  /**
   * Generate a piece of menu html in a given directory if none is present.
   *
   * @param string $dir
   *   The directory to generate the html in.
   */
  protected function generateMenuHtml($dir) {
    if (file_exists($dir . '/_menu.html')) {
      return;
    }

    // Find all the subdirs with html in them.
    $subItems = glob($dir . '/*/_title.html');

    $menuLinks = [];

    foreach ($subItems as $subItem) {
      $menuLinks[] = [
        'url' => basename($dir) . '/' . basename(dirname($subItem)) . '.html',
        'title' => file_get_contents($subItem),
      ];
    }

    $higherDir = dirname($dir);
    if ($higherDir == $this->getSourceDir()) {
      $url = '/';
    }
    else {
      $url =  '../' . basename($higherDir) . '.html';
    }

    $backLink = [
      'url' => $url,
      'title' => 'Back',
    ];

    $html = $this->twigEnv->render('menu.html.twig', ['back' => $backLink, 'links' => $menuLinks]);
    $this->fs->dumpFile($dir . '/_menu.html', $html);
  }

  /**
   * Aggregate all the files in a given dir to a twig generated html file.
   *
   * @param $dir
   *   Directory to aggregate the data for.
   * @param $template
   *   The twig template to use to render the html.
   *
   * @return string $html
   *   The aggregated html as generated by twig.
   */
  public function aggregateSourceFiles($dir, $template = 'page.html.twig') {
    $htmlFiles = glob($dir . '/*.html');

    $partials = [];
    foreach ($htmlFiles as $htmlFile) {
      $partials['html'][str_replace('.html', '', basename($htmlFile))] = file_get_contents($htmlFile);
    }

    // Add title if none exists.
    $partials['html']['_title'] = isset($partials['html']['_title']) ? $partials['html']['_title'] : 'Untitled';

    $cssFiles = glob($dir . '/*.css');
    foreach ($cssFiles as $cssFile) {
      $partials['css'][str_replace('.css', '', basename('$cssFile'))] = file_get_contents($cssFile);
    }

    return $this->twigEnv->render($template, $partials);
  }

  /**
   * Makes a dir relative to make it possible to mirror the folder system.
   *
   * @param string $dir
   *   A dir to make relative.
   *
   * @return string
   *   The relative dir for the dir.
   */
  protected function makeRelative($dir) {
    return str_replace($this->getSourceDir(), '', $dir);
  }

  /**
   * @return string
   */
  public function getTemplateDir() {
    return $this->templateDir;
  }

  /**
   * @param $templateDir
   */
  public function setTemplateDir($templateDir) {
    $this->templateDir = $templateDir;
  }

  /**
   * @return string
   */
  public function getOutputDir() {
    return $this->outputDir;
  }

  /**
   * @param $outputDir
   */
  public function setOutputDir($outputDir) {
    $this->outputDir = $outputDir;
  }

  /**
   * @return string
   */
  public function getSourceDir() {
    return $this->sourceDir;
  }

  /**
   * @param $sourceDir
   */
  public function setSourceDir($sourceDir) {
    $this->sourceDir = $sourceDir;
  }
}

?>